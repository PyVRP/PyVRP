[project]
name = "pyvrp"
version = "0.12.0a0"
description = "A state-of-the-art vehicle routing problem solver."
authors = [
    { name = "Niels Wouda", email = "nielswouda@gmail.com" },
    { name = "Leon Lan", email = "leon.lanyidong@gmail.com" },
    { name = "Wouter Kool", email = "wouter.kool@ortec.com" },
]
license = "MIT"
license-files = ["LICENSE.md"]
readme = "README.md"
keywords = [
    "vehicle routing problem",
    "hybrid genetic search",
    "metaheuristic",    
]
classifiers = [
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "Development Status :: 5 - Production/Stable",
    "Topic :: Software Development",
    "Topic :: Scientific/Engineering",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
]
requires-python = ">=3.10"
dependencies = [
    "numpy>=1.15.2; python_version < '3.12'",
    "numpy>=1.26.0; python_version >= '3.12'",
    "matplotlib>=2.2.0",
    "vrplib>=1.4.0",
    "tqdm>=4.64.1",
    "tomli>=2.0.1",
]

[project.urls]
homepage = "https://pyvrp.org/"
documentation = "https://pyvrp.org/"
source = "https://github.com/PyVRP/PyVRP"
issues = "https://github.com/PyVRP/PyVRP/issues"


[project.scripts]
pyvrp = "pyvrp.cli:main"


[dependency-groups]
build = [
    "meson>=1.0.0",
    "ninja>=1.11.1",
    "gcovr>=7.2",
    "docblock>=0.1.6",
]

dev = [
    "pre-commit>=2.20.0",
    "pytest>=6.0.0",
    "pytest-cov>=6.1.1",
    "pytest-codspeed>=2.2.1",
    "pytest-xdist>=3.6.1",
    "pytest-sugar>=1.0.0",
    "codecov",
]

docs = [
    "sphinx>=7.3.0,<8.2.0",
    "nbsphinx>=0.8.9",
    "ipython>=8.6.0",
    "numpydoc>=1.5.0",
    "sphinx-immaterial>=0.11.12",
]

examples = [
    "jupyter>=1.0.0",
    "tabulate>=0.9.0",
]


[tool.uv]
default-groups = ["build", "dev"]
package = true


[tool.black]
line-length = 79


[tool.ruff]
line-length = 79


[tool.ruff.lint]
select = [
    "E", "F", "I", "NPY", "PYI", "Q", "RET", "RSE", "RUF", "SLF", "SIM", "TC"
]


[tool.ruff.lint.isort]
case-sensitive = true
known-first-party = ["pyvrp", "tests"]


[tool.mypy]
ignore_missing_imports = true


[tool.pytest.ini_options]
addopts = [
    "--cov",
    "--cov-report=xml",
    "--cov-report=term",
    "--numprocesses=auto",
]
testpaths = "tests"


[tool.coverage.run]
omit = [
    "buildtools/*.py",  # build scripts
    "pyvrp/show_versions.py",  # only prints debug information
    "pyvrp/cli.py",  # tested in other ways than unit tests
    ".venv/*",
    "benchmarks/*",
    "docs/*",
    "tests/*",
]


[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "@abstract",
    "if TYPE_CHECKING:",
]


[tool.cibuildwheel]
# We do not support old Python versions and somewhat uncommon platforms. For
# musllinux-based builds we assume users can compile the thing themselves.
build = "cp310-* cp311-* cp312-* cp313-*"
skip = "pp* *_ppc64le *_i686 *_s390x *-win32 *-musllinux*"
build-frontend = "build"
test-requires = [
    "pytest>=6.0.0",
    "pytest-cov>=6.1.1",
    "pytest-xdist>=3.6.1",
    "pytest-sugar>=1.0.0",
]
test-command = "pytest {package}/tests"


[tool.poetry]
include = [
    { path = "benchmarks/", format = "sdist" },
    { path = "docs/", format = "sdist" },
    { path = "tests/", format = "sdist" },

    { path = "meson.build", format = "sdist" },
    { path = "meson_options.txt", format = "sdist" },
    { path = "buildtools/*.py", format = "sdist" },
    { path = "subprojects/*.wrap", format = "sdist" },

    { path = "pyvrp/**/*.so", format = "wheel" },
    { path = "pyvrp/**/*.pyd", format = "wheel" },
]
exclude = [
    "docs/build",
]
packages = [
    { include = "pyvrp" },
]


[tool.poetry.build]
generate-setup-file = false
script = "buildtools/build_wrapper.py"


[build-system]
requires = ["poetry-core>=1.0.0", "meson", "ninja", "docblock"]
build-backend = "poetry.core.masonry.api"
