name: CI

on:
  push:
    branches: [ main ]
  pull_request:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    name: >
      Build and test pyvrp using ${{ matrix.compiler }} 
      ${{ matrix.compiler-version }} and Python ${{ matrix.python-version }}
    runs-on: ubuntu-24.04
    strategy:
      fail-fast: true
      matrix:
        include:
          - compiler: gcc  # minimum gcc version
            compiler-version: '10'
            python-version: '3.10'
          - compiler: gcc  # recent gcc version
            compiler-version: '14'
            python-version: '3.13'
          - compiler: clang  # minimum clang version
            compiler-version: '14'
            python-version: '3.10'
          - compiler: clang  # recent clang version
            compiler-version: '18'
            python-version: '3.13'
    steps:
      - uses: actions/checkout@v4
        with:
          persist-credentials: false
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install uv
        uses: astral-sh/setup-uv@v6
        with:
          version: "0.7.5"
          enable-cache: true
      - name: Install Python dependencies
        run: uv sync --no-install-project
      - name: Cache pre-commit
        uses: actions/cache@v4
        id: cache-pre-commit
        with:
          path: ~/.cache/pre-commit/
          key: pre-commit-${{ env.pythonLocation }}-${{ hashFiles('.pre-commit-config.yaml') }}
      - name: Install pre-commit
        if: steps.cache-pre-commit.outputs.cache-hit != 'true'
        run: uv run --no-sync pre-commit install --install-hooks
      - name: Run pre-commit
        run: uv run --no-sync pre-commit run --all-files
      - if: matrix.compiler == 'clang'
        name: Set up clang
        run: |
          sudo apt-get install -y clang-${{ matrix.compiler-version }}

          echo "CC=clang-${{ matrix.compiler-version }}" >> $GITHUB_ENV
          echo "CXX=clang++-${{ matrix.compiler-version }}" >> $GITHUB_ENV
      - if: matrix.compiler == 'gcc'
        name: Set up GCC
        run: |
          sudo apt-get install -y gcc-${{ matrix.compiler-version }} g++-${{ matrix.compiler-version }}

          sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-${{ matrix.compiler-version }} 10
          sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-${{ matrix.compiler-version }} 10
          sudo update-alternatives --install /usr/bin/gcov gcov /usr/bin/gcov-${{ matrix.compiler-version }} 10

          echo "CC=gcc" >> $GITHUB_ENV
          echo "CXX=g++" >> $GITHUB_ENV
      - name: Build pyvrp
        # First, we install the project into the environment. This ensures
        # imports like "from pyvrp import X" work. This builds in release mode
        # by default, but we need a debug build for test coverage.
        run: |
          uv sync
          uv run buildtools/build_extensions.py --build_type debug --clean
      - name: Run tests and generate coverage reports
        run: |
          uv run pytest
          uv run ninja coverage-xml -C build
      - uses: codecov/codecov-action@v5
        with:
          fail_ci_if_error: true
          token: ${{ secrets.CODECOV_TOKEN }}
          plugins: pycoverage
          files: build/meson-logs/coverage.xml
      - if: matrix.compiler == 'gcc'
        name: Install Valgrind
        run: |
          sudo apt-get update
          sudo apt-get install -y valgrind
      - if: matrix.compiler == 'gcc'
        # Run this only when using GCC, because for some reason Valgrind has issues with
        # some of the outputs Clang produces.
        name: Briefly run an instance under Valgrind
        # Force Python to use the regular malloc() for the duration of this valgrind run.
        # That ensures we do not catch all sorts of false positives from Python's custom
        # malloc.
        # TODO also run with --leak-check=full?
        run: |
          VALGRIND_CMD="pyvrp tests/data/RC208.vrp --round_func dimacs --max_runtime 0.5 --seed 1"
          uv run env PYTHONMALLOC=malloc valgrind --tool=memcheck --quiet $VALGRIND_CMD
